/*! For license information please see api-mdx.64fe8b70.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_govuk_react_storybook=self.webpackChunk_govuk_react_storybook||[]).push([[5394],{"../../node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/api.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>api});__webpack_require__("../../node_modules/react/index.js");var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs");const API_namespaceObject='BackLink\n========\n\n### Import\n```js\n  import BackLink from \'@govuk-react/back-link\';\n```\n\x3c!-- STORY --\x3e\n\nUse the back link component to help users go back to the previous page in a multi-page transaction.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/back-link\n- https://design-system.service.gov.uk/components/back-link/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "inline" \\| "list" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `download` |  |  | any | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `href` |  |  | string | \n `hrefLang` |  |  | string | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `media` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onChange` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDrag` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDrop` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onError` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPause` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onReset` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onScroll` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `ping` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLAnchorElement> | \n `referrerPolicy` |  |  | HTMLAttributeReferrerPolicy | \n `rel` |  |  | string | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `target` |  |  | HTMLAttributeAnchorTarget | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | string | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nBreadcrumbs\n===========\n\n### Import\n```js\n  import Breadcrumbs from \'@govuk-react/breadcrumbs\';\n```\n\x3c!-- STORY --\x3e\n\nThe breadcrumbs component helps users to understand where they are within a website’s structure and move between levels.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/breadcrumbs\n- https://design-system.service.gov.uk/components/breadcrumbs/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "list" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `children` |  |  | ReactNode | Breadcrumbs contents\n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `lang` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nButton\n======\n\n### Import\n```js\n  import Button from \'@govuk-react/button\';\n```\n\x3c!-- STORY --\x3e\n\nUse the button component to help users carry out an action like starting an application or saving their information.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/button\n- https://design-system.service.gov.uk/components/button/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoFocus` |  |  | boolean | \n `autoSave` |  |  | string | \n `buttonColour` |  | ```undefined``` | string | Override for default button colour\n `buttonHoverColour` |  | ```undefined``` | string | Override for default button hover colour,<br/>which defaults to `buttonColour` darkened by 5%\n `buttonShadowColour` |  | ```undefined``` | string | Override for default button shadow colour,<br/>which defaults to `buttonColour` darkened by 15%\n `buttonTextColour` |  | ```undefined``` | string | Override for default button text colour,<br/>which defaults to govuk white\n `children` |  |  | ReactNode | Button text\n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `disabled` |  |  | boolean | \n `draggable` |  |  | Booleanish | \n `form` |  |  | string | \n `formAction` |  |  | string | \n `formEncType` |  |  | string | \n `formMethod` |  |  | string | \n `formNoValidate` |  |  | boolean | \n `formTarget` |  |  | string | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `icon` |  | ```undefined``` | ReactNode | Button icon\n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `name` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLButtonElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLButtonElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLButtonElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLButtonElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onChange` |  |  | FormEventHandler<HTMLButtonElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onClick` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLButtonElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onDrag` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDrop` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLButtonElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onError` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLButtonElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLButtonElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onInput` |  |  | FormEventHandler<HTMLButtonElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLButtonElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLButtonElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLButtonElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLButtonElement> | \n `onPause` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLButtonElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onReset` |  |  | FormEventHandler<HTMLButtonElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onScroll` |  |  | UIEventHandler<HTMLButtonElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLButtonElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLButtonElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLButtonElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLButtonElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLButtonElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLButtonElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLButtonElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLButtonElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLButtonElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLButtonElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `start` |  | ```undefined``` | boolean | Renders a large button if set to true\n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | never | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | "button" \\| "submit" \\| "reset" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `value` |  |  | string \\| number \\| readonly string[] | \n `vocab` |  |  | string | \n\n\n\nCaption\n=======\n\n### Import\n```js\n  import Caption from \'@govuk-react/caption\';\n```\n\x3c!-- STORY --\x3e\n\nSometimes you may need to make it clear that a page is part of a larger section or group. To do this, you can use a heading with a caption above it.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/caption\n- https://design-system.service.gov.uk/styles/typography/#headings\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "list" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onChange` |  |  | FormEventHandler<HTMLSpanElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDrag` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDrop` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onError` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPause` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onReset` |  |  | FormEventHandler<HTMLSpanElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onScroll` |  |  | UIEventHandler<HTMLSpanElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLSpanElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLSpanElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLSpanElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLSpanElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `size` |  | ```XL``` | string \\| number | Visual size level, accepts:<br/>   `XLARGE`, `LARGE`, `MEDIUM`, `XL`, `L`, `M`<br/>   or a numeric size that fits in the GDS font scale list\n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nCheckbox\n========\n\n### Import\n```js\n  import Checkbox from \'@govuk-react/checkbox\';\n```\n\x3c!-- STORY --\x3e\n\nLet users select one or more options by using the checkboxes component.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/checkbox\n- https://design-system.service.gov.uk/components/checkboxes/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accept` |  |  | string | \n `accessKey` |  |  | string | \n `alt` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "step" \\| "date" \\| "time" \\| "true" \\| "false" \\| "page" \\| "location" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "true" \\| "false" \\| "dialog" \\| "grid" \\| "listbox" \\| "menu" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `autoCapitalize` |  |  | string | \n `autoComplete` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoFocus` |  |  | boolean | \n `autoSave` |  |  | string | \n `capture` |  |  | string \\| boolean | \n `checked` |  |  | boolean | \n `children` | true |  | ReactNode | Text content for checkbox\n `className` |  | ```undefined``` | string | CSS Classname for outermost container\n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `crossOrigin` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `disabled` |  |  | boolean | \n `draggable` |  |  | Booleanish | \n `form` |  |  | string | \n `formAction` |  |  | string | \n `formEncType` |  |  | string | \n `formMethod` |  |  | string | \n `formNoValidate` |  |  | boolean | \n `formTarget` |  |  | string | \n `height` |  |  | string \\| number | \n `hidden` |  |  | boolean | \n `hint` |  | ```undefined``` | ReactNode | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "email" \\| "search" \\| "tel" \\| "text" \\| "url" \\| "none" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `list` |  |  | string | \n `max` |  |  | string \\| number | \n `maxLength` |  |  | number | \n `min` |  |  | string \\| number | \n `minLength` |  |  | number | \n `multiple` |  |  | boolean | \n `name` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLInputElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onChange` |  |  | ChangeEventHandler<HTMLInputElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLInputElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDrag` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDrop` |  |  | DragEventHandler<HTMLInputElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onError` |  |  | ReactEventHandler<HTMLInputElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLInputElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPause` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLInputElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onReset` |  |  | FormEventHandler<HTMLInputElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onScroll` |  |  | UIEventHandler<HTMLInputElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLInputElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLInputElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLInputElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLInputElement> | \n `pattern` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `readOnly` |  |  | boolean | \n `ref` |  |  | Ref<HTMLInputElement> | \n `required` |  |  | boolean | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `size` |  |  | number | \n `sizeVariant` |  | ```MEDIUM``` | "MEDIUM" \\| "SMALL" | Size of checkbox\n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `src` |  |  | string | \n `step` |  |  | string \\| number | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | HTMLInputTypeAttribute | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `value` |  |  | string \\| number \\| readonly string[] | \n `vocab` |  |  | string | \n `width` |  |  | string \\| number | \n\n\n\nDateField\n=========\n\n### Import\n```js\n  import DateField from \'@govuk-react/date-field\';\n```\n\x3c!-- STORY --\x3e\n\nUse the date input component to help users enter a memorable date or one they can easily look up.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/date-field\n- https://design-system.service.gov.uk/components/date-input/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "both" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "listbox" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `defaultValues` |  | ```{     day: undefined,     month: undefined,     year: undefined,   }``` | { day?: string; month?: string; year?: string; } | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `errorText` |  | ```undefined``` | string | Error text\n `hidden` |  |  | boolean | \n `hintText` |  | ```undefined``` | string | Optional hint text\n `id` |  |  | string | \n `inlist` |  |  | any | \n `input` |  | ```undefined``` | { onChange?: (date: { day: string; month: string; year: string; }) => unknown; onBlur?: (date: { day: string; month: string; year: string; }) => void; onFocus?: (date: { day: string; month: string; year: string; }) => void; value?: { ...; }; } | Properties that are sent to the input, matching final form and redux form input type\n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `inputNames` |  | ```{     day: undefined,     month: undefined,     year: undefined,   }``` | { day?: string; month?: string; year?: string; } | Input name attributes\n `inputs` |  | ```{     day: undefined,     month: undefined,     year: undefined,   }``` | { day?: InputProps; month?: InputProps; year?: InputProps; } | Custom props to pass down to the input fields\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nDetails\n=======\n\n### Import\n```js\n  import Details from \'@govuk-react/details\';\n```\n\x3c!-- STORY --\x3e\n\nMake a page easier to scan by letting users reveal more detailed information only if they need it.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/details\n- https://design-system.service.gov.uk/components/details/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  | ```undefined``` | ReactNode | The content that will be displayed when details are revealed\n `open` |  | ```undefined``` | boolean | Flag to indicate whether to show component open by default\n `summary` | true |  | ReactNode | Text for the details summary link e.g. Help with nationality\n\n\n\nDocumentFooterMetadata\n======================\n\n### Import\n```js\n  import DocumentFooterMetadata from \'@govuk-react/document-footer-metadata\';\n```\n\x3c!-- STORY --\x3e\n\nAn ordered list of documents including a document type, when updated and a link.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/document-footer-metadata\n- https://components.publishing.service.gov.uk/component-guide/document_list\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `from` |  | ```undefined``` | ReactNode[] | Array of JSX nodes to render underneath the `from:` title\n `other` |  | ```undefined``` | { id?: number; title?: string; content?: ReactNode; }[] | Array of Objects for any additional items, each object should contain an `id`, `title` and `content` property\n `partOf` |  | ```undefined``` | ReactNode[] | Array of JSX nodes to render underneath the `part of:` title\n\n\n\nErrorSummary\n============\n\n### Import\n```js\n  import ErrorSummary from \'@govuk-react/error-summary\';\n```\n\x3c!-- STORY --\x3e\n\nUse this component at the top of a page to summarise any errors a user has made.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/error-summary\n- https://design-system.service.gov.uk/components/error-summary/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `description` |  | ```undefined``` | string | Optional description of the errors\n `errors` |  | ```[]``` | { targetName?: string; text?: string; }[] | Array of errors with text and target element name to scroll into view when clicked\n `heading` |  | ```There is a problem``` | string | Heading text\n `onHandleErrorClick` |  | ```undefined``` | (targetName: string) => void | onClick function to scroll the target element into view\n\n\n\nErrorText\n=========\n\n### Import\n```js\n  import ErrorText from \'@govuk-react/error-text\';\n```\n\x3c!-- STORY --\x3e\n\nFollow the [validation pattern](https://design-system.service.gov.uk/patterns/validation/) and show an error message when there is a validation error. In the error message explain what went wrong and how to fix it.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/error-text\n- https://design-system.service.gov.uk/components/error-message/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "both" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onChange` |  |  | FormEventHandler<HTMLSpanElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDrag` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDrop` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onError` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPause` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onReset` |  |  | FormEventHandler<HTMLSpanElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onScroll` |  |  | UIEventHandler<HTMLSpanElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLSpanElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLSpanElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLSpanElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLSpanElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nFieldset\n========\n\n### Import\n```js\n  import Fieldset from \'@govuk-react/fieldset\';\n```\n\x3c!-- STORY --\x3e\n\nUse the fieldset component when you need to show a relationship between multiple\nform inputs. For example, you may need to group a set of text inputs into a single\nfieldset when [asking for an address](https://design-system.service.gov.uk/patterns/addresses).\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/fieldset\n- https://design-system.service.gov.uk/components/fieldset/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nFileUpload\n==========\n\n### Import\n```js\n  import FileUpload from \'@govuk-react/file-upload\';\n```\n\x3c!-- STORY --\x3e\n\nHelp users select and upload a file.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/file-upload\n- https://design-system.service.gov.uk/components/file-upload/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `acceptedFormats` |  | ```undefined``` | string | \n `error` |  |  | boolean | Apply error state styling to the component\n `hint` |  | ```undefined``` | string | Optional hint text\n `key` |  |  | Key | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `meta` |  | ```{}``` | { error?: string \\| string[]; touched?: boolean; } | Final form meta object, pending adjustment/removal\n `name` |  | ```undefined``` | string | \n `onChange` |  | ```undefined``` | ChangeEventHandler<HTMLInputElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `ref` |  |  | Ref<HTMLInputElement> | \n\n\n\nFooter\n======\n\n### Import\n```js\n  import Footer from \'@govuk-react/footer\';\n```\n\x3c!-- STORY --\x3e\n\nThe footer provides copyright, licensing and other information about your service and department.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/footer\n- https://design-system.service.gov.uk/components/footer/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  | ```undefined``` | ReactNode | Footer navigation links\n `container` |  | ```Footer.WidthContainer``` | ElementType<any> | Override the default footer container component.<br/>`children`, `copyright` and `meta` will be placed inside this component.\n `copyright` |  | ```undefined``` | CopyrightProps | Copyright information\n `licence` |  | ```<Licence />``` | ReactNode | Licence content\n `meta` |  | ```undefined``` | ReactNode | Meta text and links\n\n\n\nFormGroup\n=========\n\n### Import\n```js\n  import FormGroup from \'@govuk-react/form-group\';\n```\n\x3c!-- STORY --\x3e\n\nFor wrapping a set of form fields such as checkboxes.\n\nAlso see Label and LabelText components.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/form-group\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "list" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `error` |  | ```undefined``` | boolean | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "search" \\| "none" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nGlobalStyle\n===========\n\n### Import\n```js\n  import GlobalStyle from \'@govuk-react/global-style\';\n```\n\x3c!-- STORY --\x3e\n\nA Styled Component to apply global style for use with govuk-react.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/global-style\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `suppressMultiMountWarning` |  |  | boolean | \n `theme` |  |  | DefaultTheme | \n\n\n\nGridCol\n=======\n\n### Import\n```js\n  import GridCol from \'@govuk-react/grid-col\';\n```\n\x3c!-- STORY --\x3e\n\nGrid Column.\n\nShould always be wrapped by `GridRow`. Will always render a column at full width if\nthe browser width is below the `TABLET` breakpoint.\n\nNB our grid is based on flex-box, which differs from govuk-frontend, which instead uses\nfloats, however it is otherwise similar to use.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/grid-col\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "both" \\| "none" \\| "inline" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "listbox" \\| "grid" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `children` |  | ```undefined``` | ReactNode | GridCol content\n `className` |  |  | string | \n `color` |  |  | string | \n `columnFull` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `columnOneHalf` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `columnOneQuarter` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `columnOneThird` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `columnThreeQuarters` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `columnTwoThirds` |  | ```undefined``` | boolean | Dimension setting for the column (deprecated)\n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `setDesktopWidth` |  | ```undefined``` | string \\| number | Explicitly set desktop column to width using value or descriptive string<br/>(`one-quarter`, `one-third`, `one-half`, `two-thirds`, `three-quarters`, `full`)\n `setWidth` |  | ```undefined``` | string \\| number | Explicitly set column to width using value or descriptive string<br/>(`one-quarter`, `one-third`, `one-half`, `two-thirds`, `three-quarters`, `full`)\n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nGridRow\n=======\n\n### Import\n```js\n  import GridRow from \'@govuk-react/grid-row\';\n```\n\x3c!-- STORY --\x3e\n\nGrid Row, to be used as a parent component for GridCol.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/grid-row\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "both" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "listbox" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\n\nHintText\n========\n\n### Import\n```js\n  import HintText from \'@govuk-react/hint-text\';\n```\n\x3c!-- STORY --\x3e\n\nUse hint text alongside a form input for help that’s relevant to the majority of users, like how their information will be used, or where to find it.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/hint-text\n- https://design-system.service.gov.uk/components/text-input/#hint-text\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "list" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onChange` |  |  | FormEventHandler<HTMLSpanElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDrag` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDrop` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onError` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPause` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onReset` |  |  | FormEventHandler<HTMLSpanElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onScroll` |  |  | UIEventHandler<HTMLSpanElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLSpanElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLSpanElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLSpanElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLSpanElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nInputField\n==========\n\n### Import\n```js\n  import InputField from \'@govuk-react/input-field\';\n```\n\x3c!-- STORY --\x3e\n\nUse the text input component when you need to let users enter text that’s no longer than a single line, such as their name or phone number.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/input-field\n- https://design-system.service.gov.uk/components/text-input/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `error` |  |  | boolean | Apply error state styling to the component\n `hint` |  | ```undefined``` | ReactNode | \n `input` |  | ```{}``` | InputProps | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `meta` |  | ```{}``` | { error?: string \\| string[]; touched?: boolean; } | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nInput\n=====\n\n### Import\n```js\n  import Input from \'@govuk-react/input\';\n```\n\x3c!-- STORY --\x3e\n\nUse the text input component when you need to let users enter text that’s no longer than a single line, such as their name or phone number.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/input\n- https://design-system.service.gov.uk/components/text-input/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accept` |  |  | string | \n `accessKey` |  |  | string | \n `alt` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "step" \\| "date" \\| "true" \\| "false" \\| "page" \\| "location" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "listbox" \\| "true" \\| "false" \\| "grid" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoComplete` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoFocus` |  |  | boolean | \n `autoSave` |  |  | string | \n `capture` |  |  | string \\| boolean | \n `checked` |  |  | boolean | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `crossOrigin` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `disabled` |  |  | boolean | \n `draggable` |  |  | Booleanish | \n `error` |  | ```undefined``` | boolean | \n `errorColor` |  | ```undefined``` | string | \n `form` |  |  | string | \n `formAction` |  |  | string | \n `formEncType` |  |  | string | \n `formMethod` |  |  | string | \n `formNoValidate` |  |  | boolean | \n `formTarget` |  |  | string | \n `forwardedAs` |  |  | undefined | \n `height` |  |  | string \\| number | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "email" \\| "tel" \\| "url" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `list` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `max` |  |  | string \\| number | \n `maxLength` |  |  | number | \n `mb` |  |  | string \\| number | \n `min` |  |  | string \\| number | \n `minLength` |  |  | number | \n `multiple` |  |  | boolean | \n `name` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLInputElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onChange` |  |  | ChangeEventHandler<HTMLInputElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLInputElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDrag` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDrop` |  |  | DragEventHandler<HTMLInputElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onError` |  |  | ReactEventHandler<HTMLInputElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLInputElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPause` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLInputElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onReset` |  |  | FormEventHandler<HTMLInputElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onScroll` |  |  | UIEventHandler<HTMLInputElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLInputElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLInputElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLInputElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLInputElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `pattern` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `readOnly` |  |  | boolean | \n `ref` |  |  | Ref<HTMLInputElement> | \n `required` |  |  | boolean | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `size` |  |  | number | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `src` |  |  | string | \n `step` |  |  | string \\| number | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  | ```text``` | HTMLInputTypeAttribute | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `value` |  |  | string \\| number \\| readonly string[] | \n `vocab` |  |  | string | \n `width` |  |  | string \\| number | \n\n\n\nInsetText\n=========\n\n### Import\n```js\n  import InsetText from \'@govuk-react/inset-text\';\n```\n\x3c!-- STORY --\x3e\n\nUse the inset text component to differentiate a block of text from the content that surrounds it.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/inset-text\n- https://design-system.service.gov.uk/components/inset-text/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "both" \\| "list" \\| "inline" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "search" \\| "none" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nLabelText\n=========\n\n### Import\n```js\n  import LabelText from \'@govuk-react/label-text\';\n```\n\x3c!-- STORY --\x3e\n\nStyled text to use as a label for a form input.\n\nThis is not a label element by default as it is assumed it will be wrapped with Label component.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/label-text\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "both" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onChange` |  |  | FormEventHandler<HTMLSpanElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDrag` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDrop` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onError` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPause` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onReset` |  |  | FormEventHandler<HTMLSpanElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onScroll` |  |  | UIEventHandler<HTMLSpanElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLSpanElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLSpanElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLSpanElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLSpanElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nLabel\n=====\n\n### Import\n```js\n  import Label from \'@govuk-react/label\';\n```\n\x3c!-- STORY --\x3e\n\nLabel element to wrap label-text and a form input.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/label\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "both" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "listbox" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `error` |  | ```undefined``` | boolean | Apply error state styling to the component\n `form` |  |  | string | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `htmlFor` |  |  | string | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLLabelElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLLabelElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLLabelElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLLabelElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onChange` |  |  | FormEventHandler<HTMLLabelElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onClick` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLLabelElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onDrag` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDrop` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLLabelElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onError` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLLabelElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLLabelElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onInput` |  |  | FormEventHandler<HTMLLabelElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLLabelElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLLabelElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLLabelElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLLabelElement> | \n `onPause` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLLabelElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onReset` |  |  | FormEventHandler<HTMLLabelElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onScroll` |  |  | UIEventHandler<HTMLLabelElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLLabelElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLLabelElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLLabelElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLLabelElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLLabelElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLLabelElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLLabelElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLLabelElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLLabelElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLLabelElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nLeadParagraph\n=============\n\n### Import\n```js\n  import LeadParagraph from \'@govuk-react/lead-paragraph\';\n```\n\x3c!-- STORY --\x3e\n\nA lead paragraph is an introductory paragraph that you can use at the top of a page to summarise the content.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/lead-paragraph\n- https://design-system.service.gov.uk/styles/typography/#lead-paragraph\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "list" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "search" \\| "none" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLParagraphElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLParagraphElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLParagraphElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onChange` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onClick` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLParagraphElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onDrag` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDrop` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLParagraphElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onError` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLParagraphElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLParagraphElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onInput` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLParagraphElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLParagraphElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLParagraphElement> | \n `onPause` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLParagraphElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onReset` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onScroll` |  |  | UIEventHandler<HTMLParagraphElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLParagraphElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLParagraphElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLParagraphElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLParagraphElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLParagraphElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLParagraphElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLParagraphElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLParagraphElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLParagraphElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nLink\n====\n\n### Import\n```js\n  import Link from \'@govuk-react/link\';\n```\n\x3c!-- STORY --\x3e\n\nLink/Anchor element.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/link\n- https://design-system.service.gov.uk/styles/typography/#links\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `children` |  |  | ReactNode | link contents\n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `download` |  |  | any | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `href` |  |  | string | \n `hrefLang` |  |  | string | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `media` |  |  | string | \n `muted` |  | ```undefined``` | boolean | show link in a "muted" (grey) style\n `noVisitedState` |  | ```undefined``` | boolean | ensure there is no "visited" style\n `onAbort` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onChange` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDrag` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDrop` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onError` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPause` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onReset` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onScroll` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `ping` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLAnchorElement> | \n `referrerPolicy` |  |  | HTMLAttributeReferrerPolicy | \n `rel` |  |  | string | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `target` |  |  | HTMLAttributeAnchorTarget | \n `textColour` |  | ```undefined``` | boolean | ensure link is shown in plain text colour\n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | string | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nListItem\n========\n\n### Import\n```js\n  import ListItem from \'@govuk-react/list-item\';\n```\n\x3c!-- STORY --\x3e\n\nUse lists to make blocks of text easier to read, and to break information into manageable chunks.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/list-item\n- https://design-system.service.gov.uk/styles/typography/#lists\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "list" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "search" \\| "none" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLLIElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLLIElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLLIElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLLIElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLLIElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLLIElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLLIElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLLIElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onChange` |  |  | FormEventHandler<HTMLLIElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onClick` |  |  | MouseEventHandler<HTMLLIElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLLIElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLLIElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLLIElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onDrag` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLLIElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDrop` |  |  | DragEventHandler<HTMLLIElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLLIElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLLIElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLLIElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onError` |  |  | ReactEventHandler<HTMLLIElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLLIElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLLIElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onInput` |  |  | FormEventHandler<HTMLLIElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLLIElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLLIElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLLIElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLLIElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLLIElement> | \n `onPause` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLLIElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLLIElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLLIElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLLIElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onReset` |  |  | FormEventHandler<HTMLLIElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onScroll` |  |  | UIEventHandler<HTMLLIElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLLIElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLLIElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLLIElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLLIElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLLIElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLLIElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLLIElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLLIElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLLIElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLLIElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLLIElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLLIElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLLIElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLLIElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLLIElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `value` |  |  | string \\| number \\| readonly string[] | \n `vocab` |  |  | string | \n\n\n\nLoadingBox\n==========\n\n### Import\n```js\n  import LoadingBox from \'@govuk-react/loading-box\';\n```\n\x3c!-- STORY --\x3e\n\nUse a LoadingBox to wrap components that can asyncronously load content.\n\nWhen `loading` is set to `true`, a spinner will overlay the contents to give visual feedback to the user.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/loading-box\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `backgroundColor` |  | ```undefined``` | string | Background color (3 or 6 Hex char) of loading spinner overlay when loading is true.\n `backgroundColorOpacity` |  | ```undefined``` | number | Opacity of loading spinner backgroud colour when loading is true\n `children` |  |  | ReactNode | One or more children nodes that loading box will overlay\n `loading` |  | ```undefined``` | boolean | Whether loading is currently set to true or false\n `spinnerColor` |  | ```undefined``` | string | Color (3 or 6 Hex char) of loading spinner\n `timeIn` |  | ```undefined``` | number | Length of fade-in animation in milliseconds\n `timeOut` |  | ```undefined``` | number | Length of fade-out animation in milliseconds\n `title` |  | ```undefined``` | string | Loading spinner title text\n\n\n\nMain\n====\n\n### Import\n```js\n  import Main from \'@govuk-react/main\';\n```\n\x3c!-- STORY --\x3e\n\nProvides a container which aligns to the TopNav component, is centered, and provides top padding.\n\nNote, this equivalent to \'width-container\' from govuk-frontend.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/main\n- https://design-system.service.gov.uk/styles/layout/#page-wrappers\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  | ```undefined``` | ReactNode | Child nodes for the page being built\n\n\n\nMultiChoice\n===========\n\n### Import\n```js\n  import MultiChoice from \'@govuk-react/multi-choice\';\n```\n\x3c!-- STORY --\x3e\n\nFor wrapping a set of radio buttons with a label, optional hint and optional error.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/multi-choice\n- https://design-system.service.gov.uk/components/radios/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `hint` |  | ```undefined``` | string | \n `label` | true |  | ReactNode | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `meta` |  | ```{}``` | { error?: string \\| string[]; touched?: boolean; } | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nOrderedList\n===========\n\n### Import\n```js\n  import OrderedList from \'@govuk-react/ordered-list\';\n```\n\x3c!-- STORY --\x3e\n\nUse lists to make blocks of text easier to read, and to break information into manageable chunks.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/ordered-list\n- https://design-system.service.gov.uk/styles/typography/#lists\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "list" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "search" \\| "none" \\| "decimal" \\| "tel" \\| "url" \\| "email" \\| "numeric" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `listStyleType` |  | ```undefined``` | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLOListElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLOListElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLOListElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLOListElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLOListElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLOListElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLOListElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLOListElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onChange` |  |  | FormEventHandler<HTMLOListElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onClick` |  |  | MouseEventHandler<HTMLOListElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLOListElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLOListElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLOListElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onDrag` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLOListElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDrop` |  |  | DragEventHandler<HTMLOListElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLOListElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLOListElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLOListElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onError` |  |  | ReactEventHandler<HTMLOListElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLOListElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLOListElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onInput` |  |  | FormEventHandler<HTMLOListElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLOListElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLOListElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLOListElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLOListElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLOListElement> | \n `onPause` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLOListElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLOListElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLOListElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLOListElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onReset` |  |  | FormEventHandler<HTMLOListElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onScroll` |  |  | UIEventHandler<HTMLOListElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLOListElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLOListElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLOListElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLOListElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLOListElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLOListElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLOListElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLOListElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLOListElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLOListElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLOListElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLOListElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLOListElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLOListElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLOListElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `reversed` |  |  | boolean | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `start` |  |  | number | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | "a" \\| "i" \\| "1" \\| "A" \\| "I" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nPage\n====\n\n### Import\n```js\n  import Page from \'@govuk-react/page\';\n```\n\x3c!-- STORY --\x3e\n\nUse this template to keep your pages consistent with the rest of GOV.UK.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/page\n- https://design-system.service.gov.uk/styles/page-template/\n- https://design-system.service.gov.uk/styles/layout/#page-wrappers\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `beforeChildren` |  | ```undefined``` | ReactNode | Content that needs to appear outside the main page wrapper (see `main`).<br/>For example: A back link component, breadcrumbs, phase banner component\n `children` |  | ```undefined``` | ReactNode | Page contents\n `container` |  | ```Page.WidthContainer``` | ElementType<any> | Override the default page container component.<br/>`beforeChildren` and `children` (wrapped in `main`) will be placed inside this component.\n `footer` |  | ```undefined``` | ReactNode | Override the default page footer component.\n `header` |  | ```<TopNav />``` | ReactNode | Override the default page header component.\n `id` |  | ```content``` | string | ID for page content\n `main` |  | ```Page.Main``` | ElementType<any> | Override the default wrapper component for main page content\n\n\n\nPagination\n==========\n\n### Import\n```js\n  import Pagination from \'@govuk-react/pagination\';\n```\n\x3c!-- STORY --\x3e\n\nNavigational links that allow users to navigate within a series of pages or elements.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/pagination\n- https://components.publishing.service.gov.uk/component-guide/previous_and_next_navigation\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n\n\n\n\nPanel\n=====\n\n### Import\n```js\n  import Panel from \'@govuk-react/panel\';\n```\n\x3c!-- STORY --\x3e\n\nThe panel component is a visible container used on confirmation or results pages to highlight important content.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/panel\n- https://design-system.service.gov.uk/components/panel/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  | ```undefined``` | ReactNode | Panel body text\n `title` | true |  | string | Panel title text\n\n\n\nParagraph\n=========\n\n### Import\n```js\n  import Paragraph from \'@govuk-react/paragraph\';\n```\n\x3c!-- STORY --\x3e\n\nMarkdown Formatter.\n\nSupports bold, italic, links, inline code and block code in Markdown ONLY.\nThis is to ensure we follow GDS as closely as possible.\nIt is worth noting that GDS recommends avoiding bold and italics.\n\nBold should be avoided in general as not only can it dilute the message, it will also\ncause Screenreaders to increase the volume of any bold text to reflect the increase in\nfont-weight.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/paragraph\n- https://design-system.service.gov.uk/styles/typography/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `allowDangerousHtml` |  |  | boolean | \n `allowNode` |  |  | (node: Content, index: number, parent: "definition" \\| "heading" \\| "link" \\| "list" \\| "table" \\| "text" \\| "paragraph" \\| "blockquote" \\| "html" \\| "code" \\| "yaml" \\| "footnoteDefinition" \\| ... 13 more ... \\| "footnoteReference") => boolean | \n `allowedTypes` |  |  | ("definition" \\| "heading" \\| "link" \\| "list" \\| "table" \\| "text" \\| "paragraph" \\| "blockquote" \\| "html" \\| "code" \\| "yaml" \\| "footnoteDefinition" \\| "listItem" \\| "tableRow" \\| "tableCell" \\| ... 10 more ... \\| "footnoteReference")[] | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "true" \\| "false" \\| "time" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "true" \\| "false" \\| "dialog" \\| "grid" \\| "listbox" \\| "menu" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `astPlugins` |  |  | PluggableList | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `children` |  | `````` | string & ReactNode | Text content supporting markdown\n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `disallowedTypes` |  |  | ("definition" \\| "heading" \\| "link" \\| "list" \\| "table" \\| "text" \\| "paragraph" \\| "blockquote" \\| "html" \\| "code" \\| "yaml" \\| "footnoteDefinition" \\| "listItem" \\| "tableRow" \\| "tableCell" \\| ... 10 more ... \\| "footnoteReference")[] | \n `draggable` |  |  | Booleanish | \n `escapeHtml` |  |  | boolean | @deprecated use allowDangerousHtml\n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `includeNodeIndex` |  |  | boolean | \n `inlist` |  |  | any | \n `inputMode` |  |  | "none" \\| "search" \\| "text" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `lang` |  |  | string | \n `linkRenderer` |  | ```(props) => <Link {...props} />``` | ElementType<any> | \n `linkTarget` |  |  | string \\| LinkTargetResolver | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `plugins` |  |  | PluggableList | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `rawSourcePos` |  |  | boolean | \n `renderers` |  |  | { [nodeType: string]: ElementType; } | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `skipHtml` |  |  | boolean | \n `slot` |  |  | string | \n `source` |  |  | string | @deprecated use children\n `sourcePos` |  |  | boolean | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `supportingText` |  | ```undefined``` | boolean | Is this paragraph supporting text for another element?\n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `transformImageUri` |  |  | (uri: string, children?: ReactNode, title?: string, alt?: string) => string | \n `transformLinkUri` |  |  | (uri: string, children?: ReactNode, title?: string) => string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `unwrapDisallowed` |  |  | boolean | \n `vocab` |  |  | string | \n\n\n\nPhaseBanner\n===========\n\n### Import\n```js\n  import PhaseBanner from \'@govuk-react/phase-banner\';\n```\n\x3c!-- STORY --\x3e\n\nUse the phase banner component to show users your service is still being worked on.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/phase-banner\n- https://design-system.service.gov.uk/components/phase-banner/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  |  | ReactNode | Children text and links\n `level` | true |  | string | Alpha or beta banner\n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nRadio\n=====\n\n### Import\n```js\n  import Radio from \'@govuk-react/radio\';\n```\n\x3c!-- STORY --\x3e\n\nUse the radios component when users can only select one option from a list.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/radio\n- https://design-system.service.gov.uk/components/radios/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accept` |  |  | string | \n `accessKey` |  |  | string | \n `alt` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "list" \\| "none" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "step" \\| "date" \\| "time" \\| "true" \\| "false" \\| "page" \\| "location" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "true" \\| "false" \\| "dialog" \\| "grid" \\| "listbox" \\| "menu" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `autoCapitalize` |  |  | string | \n `autoComplete` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoFocus` |  |  | boolean | \n `autoSave` |  |  | string | \n `capture` |  |  | string \\| boolean | \n `checked` |  |  | boolean | \n `className` |  | ```undefined``` | string | \n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `crossOrigin` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `disabled` |  |  | boolean | \n `draggable` |  |  | Booleanish | \n `form` |  |  | string | \n `formAction` |  |  | string | \n `formEncType` |  |  | string | \n `formMethod` |  |  | string | \n `formNoValidate` |  |  | boolean | \n `formTarget` |  |  | string | \n `height` |  |  | string \\| number | \n `hidden` |  |  | boolean | \n `hint` |  | ```undefined``` | ReactNode | \n `id` |  |  | string | \n `inline` |  | ```undefined``` | boolean | \n `inlist` |  |  | any | \n `inputMode` |  |  | "email" \\| "search" \\| "tel" \\| "text" \\| "url" \\| "none" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `list` |  |  | string | \n `max` |  |  | string \\| number | \n `maxLength` |  |  | number | \n `min` |  |  | string \\| number | \n `minLength` |  |  | number | \n `multiple` |  |  | boolean | \n `name` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLInputElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLInputElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLInputElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onChange` |  |  | ChangeEventHandler<HTMLInputElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLInputElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLInputElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onDrag` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLInputElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDrop` |  |  | DragEventHandler<HTMLInputElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLInputElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLInputElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onError` |  |  | ReactEventHandler<HTMLInputElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLInputElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLInputElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onInput` |  |  | FormEventHandler<HTMLInputElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLInputElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLInputElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLInputElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLInputElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLInputElement> | \n `onPause` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLInputElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLInputElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLInputElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onReset` |  |  | FormEventHandler<HTMLInputElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onScroll` |  |  | UIEventHandler<HTMLInputElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLInputElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLInputElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLInputElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLInputElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLInputElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLInputElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLInputElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLInputElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLInputElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLInputElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLInputElement> | \n `pattern` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `readOnly` |  |  | boolean | \n `ref` |  |  | Ref<HTMLInputElement> | \n `required` |  |  | boolean | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `size` |  |  | number | \n `sizeVariant` |  | ```MEDIUM``` | "MEDIUM" \\| "SMALL" | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `src` |  |  | string | \n `step` |  |  | string \\| number | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | HTMLInputTypeAttribute | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `value` |  |  | string \\| number \\| readonly string[] | \n `vocab` |  |  | string | \n `width` |  |  | string \\| number | \n\n\n\nRelatedItems\n============\n\n### Import\n```js\n  import RelatedItems from \'@govuk-react/related-items\';\n```\n\x3c!-- STORY --\x3e\n\nComponent showing related content, including topics, guidance and collections.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/related-items\n- https://components.publishing.service.gov.uk/component-guide/related_navigation\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "both" \\| "inline" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "listbox" \\| "grid" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nSearchBox\n=========\n\n### Import\n```js\n  import SearchBox from \'@govuk-react/search-box\';\n```\n\x3c!-- STORY --\x3e\n\nA search box with attached submit button.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/search-box\n- https://components.publishing.service.gov.uk/component-guide/search\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLDivElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLDivElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLDivElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onChange` |  |  | FormEventHandler<HTMLDivElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLDivElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLDivElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onDrag` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLDivElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDrop` |  |  | DragEventHandler<HTMLDivElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLDivElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLDivElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onError` |  |  | ReactEventHandler<HTMLDivElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLDivElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLDivElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onInput` |  |  | FormEventHandler<HTMLDivElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLDivElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLDivElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLDivElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLDivElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLDivElement> | \n `onPause` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLDivElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLDivElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLDivElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onReset` |  |  | FormEventHandler<HTMLDivElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onScroll` |  |  | UIEventHandler<HTMLDivElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLDivElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLDivElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLDivElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLDivElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLDivElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLDivElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLDivElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLDivElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLDivElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLDivElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLDivElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLDivElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nSectionBreak\n============\n\n### Import\n```js\n  import SectionBreak from \'@govuk-react/section-break\';\n```\n\x3c!-- STORY --\x3e\n\nCreate a thematic break between sections of content.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/section-break\n- https://design-system.service.gov.uk/styles/typography/#section-break\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "false" \\| "true" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "both" \\| "inline" \\| "list" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "false" \\| "true" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "page" \\| "false" \\| "true" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "move" \\| "execute" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "false" \\| "true" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "listbox" \\| "grid" \\| "false" \\| "true" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "false" \\| "true" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "false" \\| "true" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "false" \\| "true" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "false" \\| "true" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "false" \\| "true" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "mixed" \\| "false" \\| "true" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "false" \\| "true" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "all" \\| "additions" \\| "additions removals" \\| "additions text" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "false" \\| "true" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "false" \\| "true" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `level` |  |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `onAbort` |  |  | ReactEventHandler<HTMLHRElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLHRElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLHRElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLHRElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLHRElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLHRElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLHRElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLHRElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onChange` |  |  | FormEventHandler<HTMLHRElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onClick` |  |  | MouseEventHandler<HTMLHRElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLHRElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLHRElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLHRElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onDrag` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLHRElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDrop` |  |  | DragEventHandler<HTMLHRElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLHRElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLHRElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLHRElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onError` |  |  | ReactEventHandler<HTMLHRElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLHRElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLHRElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onInput` |  |  | FormEventHandler<HTMLHRElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLHRElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLHRElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLHRElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLHRElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLHRElement> | \n `onPause` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLHRElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLHRElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLHRElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLHRElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onReset` |  |  | FormEventHandler<HTMLHRElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onScroll` |  |  | UIEventHandler<HTMLHRElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLHRElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLHRElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLHRElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLHRElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLHRElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLHRElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLHRElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLHRElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLHRElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLHRElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLHRElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLHRElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLHRElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLHRElement> | \n `padding` |  |  | Padding \\| Padding[] | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLHRElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `visible` |  | ```undefined``` | boolean | \n `vocab` |  |  | string | \n\n\n\nSelect\n======\n\n### Import\n```js\n  import Select from \'@govuk-react/select\';\n```\n\x3c!-- STORY --\x3e\n\nThe select component should only be used as a last resort in public-facing services because research shows that some users find selects very difficult to use.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/select\n- https://design-system.service.gov.uk/components/select/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `error` |  |  | boolean | Apply error state styling to the component\n `errorText` |  | ```undefined``` | string | \n `hint` |  | ```undefined``` | ReactNode | \n `input` |  | ```{}``` | SelectHTMLAttributes<HTMLSelectElement> | \n `label` | true |  | string | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `meta` |  | ```{}``` | { error?: string \\| string[]; touched?: boolean; } | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nSkipLink\n========\n\n### Import\n```js\n  import SkipLink from \'@govuk-react/skip-link\';\n```\n\x3c!-- STORY --\x3e\n\n\nUse the skip link component to help keyboard-only users skip to the main content on a page.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/skip-link\n- https://design-system.service.gov.uk/components/skip-link/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "none" \\| "inline" \\| "list" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `download` |  |  | any | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `href` |  | ```#content``` | string | \n `hrefLang` |  |  | string | \n `id` |  |  | string | \n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `media` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLAnchorElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onChange` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLAnchorElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onDrag` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDrop` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLAnchorElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onError` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLAnchorElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onInput` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLAnchorElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLAnchorElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLAnchorElement> | \n `onPause` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLAnchorElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onReset` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onScroll` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLAnchorElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLAnchorElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLAnchorElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLAnchorElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLAnchorElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLAnchorElement> | \n `ping` |  |  | string | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLAnchorElement> | \n `referrerPolicy` |  |  | HTMLAttributeReferrerPolicy | \n `rel` |  |  | string | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `target` |  |  | HTMLAttributeAnchorTarget | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `type` |  |  | string | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nTable\n=====\n\n### Import\n```js\n  import Table from \'@govuk-react/table\';\n```\n\x3c!-- STORY --\x3e\n\nUse the table component to make information easier to compare and scan for users.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/table\n- https://design-system.service.gov.uk/components/table/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `body` |  | ```undefined``` | ReactNode | Table body rows and cells (for backward compatibility)\n `caption` |  | ```undefined``` | string | Table caption title\n `children` |  | ```undefined``` | ReactNode | Table body rows and cells (recommended way)\n `head` |  | ```undefined``` | ReactNode | Table header rows and cells\n\n\n\nTabs\n====\n\n### Import\n```js\n  import Tabs from \'@govuk-react/tabs\';\n```\n\x3c!-- STORY --\x3e\n\nThe tabs component lets users navigate between related sections of content, displaying one section at a time.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/tabs\n- https://design-system.service.gov.uk/components/tabs/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  |  | ReactNode | child components that will appear in the Tabs section\n\n\n\nTag\n===\n\n### Import\n```js\n  import Tag from \'@govuk-react/tag\';\n```\n\x3c!-- STORY --\x3e\n\nUse the tag component to show users the status of something.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/tag\n- https://design-system.service.gov.uk/components/tag/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "inline" \\| "none" \\| "list" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "grid" \\| "true" \\| "false" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `backgroundColor` |  |  | string | Custom colour to override the tag background color\n `className` |  |  | string | \n `color` |  |  | string | Custom colour to override the tag text color\n `contentEditable` |  |  | "inherit" \\| Booleanish | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `inactive` |  | ```undefined``` | boolean | Deprecated: use grey tint instead\n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onChange` |  |  | FormEventHandler<HTMLElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLElement> | \n `onClick` |  |  | MouseEventHandler<HTMLElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onDrag` |  |  | DragEventHandler<HTMLElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDrop` |  |  | DragEventHandler<HTMLElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onError` |  |  | ReactEventHandler<HTMLElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onInput` |  |  | FormEventHandler<HTMLElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLElement> | \n `onPause` |  |  | ReactEventHandler<HTMLElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onReset` |  |  | FormEventHandler<HTMLElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLElement> | \n `onScroll` |  |  | UIEventHandler<HTMLElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLElement> | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `tint` |  | ```SOLID``` | "SOLID" \\| "GREY" \\| "GREEN" \\| "TURQUOISE" \\| "BLUE" \\| "PURPLE" \\| "PINK" \\| "RED" \\| "ORANGE" \\| "YELLOW" | Tag tint\n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nTextArea\n========\n\n### Import\n```js\n  import TextArea from \'@govuk-react/text-area\';\n```\n\x3c!-- STORY --\x3e\n\nUse the textarea component when you need to let users enter an amount of text that’s longer than a single line.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/text-area\n- https://design-system.service.gov.uk/components/textarea/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `error` |  |  | boolean | Apply error state styling to the component\n `hint` |  | ```undefined``` | ReactNode | \n `input` |  | ```{}``` | TextareaHTMLAttributes<HTMLTextAreaElement> | \n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `meta` |  | ```{}``` | { error?: string \\| string[]; touched?: boolean; } | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nTopNav\n======\n\n### Import\n```js\n  import TopNav from \'@govuk-react/top-nav\';\n```\n\x3c!-- STORY --\x3e\n\nThe GOV.UK header shows users that they are on GOV.UK and which service they are using.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/top-nav\n- https://design-system.service.gov.uk/components/header/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `bgColor` |  | ```undefined``` | string | Top nav background color\n `children` |  | ```undefined``` | any | List Navigation items with anchor tags e.g. NavAnchor components\n `color` |  | ```undefined``` | string | Top nav text color\n `company` |  | ```<IconTitle icon={<CrownIcon width="36" height="32" />}>GOV.UK</IconTitle>``` | React.ReactNode | Company component e.g. GOV UK\n `defaultOpen` |  | ```undefined``` | boolean | Is the mobile navigation open by default?\n `search` |  | ```undefined``` | React.ReactNode | Search component\n `serviceTitle` |  | ```undefined``` | React.ReactNode | Service title component e.g. Food Standards Authority\n\n\n\nUnorderedList\n=============\n\n### Import\n```js\n  import UnorderedList from \'@govuk-react/unordered-list\';\n```\n\x3c!-- STORY --\x3e\n\nUse lists to make blocks of text easier to read, and to break information into manageable chunks.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/ordered-list\n- https://design-system.service.gov.uk/styles/typography/#lists\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  |  | ReactNode | One or more ListItem components\n `listStyleType` |  | ```undefined``` | string | CSS value for `list-style-type`, or `bullet` or `number` to match govuk-frontend\n `margin` |  |  | Margin \\| Margin[] | \n `mb` |  |  | string \\| number | \n `padding` |  |  | Padding \\| Padding[] | \n\n\n\nVisuallyHidden\n==============\n\n### Import\n```js\n  import VisuallyHidden from \'@govuk-react/visually-hidden\';\n```\n\x3c!-- STORY --\x3e\n\nHide an element visually, but have it available for screen readers.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/visually-hidden\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `about` |  |  | string | \n `accessKey` |  |  | string | \n `aria-activedescendant` |  |  | string | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n `aria-atomic` |  |  | boolean \\| "true" \\| "false" | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n `aria-autocomplete` |  |  | "list" \\| "none" \\| "inline" \\| "both" | Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be<br/>presented if they are made.\n `aria-busy` |  |  | boolean \\| "true" \\| "false" | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n `aria-checked` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.<br/>@see aria-pressed<br/>@see aria-selected.\n `aria-colcount` |  |  | number | Defines the total number of columns in a table, grid, or treegrid.<br/>@see aria-colindex.\n `aria-colindex` |  |  | number | Defines an element\'s column index or position with respect to the total number of columns within a table, grid, or treegrid.<br/>@see aria-colcount<br/>@see aria-colspan.\n `aria-colspan` |  |  | number | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-colindex<br/>@see aria-rowspan.\n `aria-controls` |  |  | string | Identifies the element (or elements) whose contents or presence are controlled by the current element.<br/>@see aria-owns.\n `aria-current` |  |  | boolean \\| "time" \\| "true" \\| "false" \\| "page" \\| "step" \\| "location" \\| "date" | Indicates the element that represents the current item within a container or set of related elements.\n `aria-describedby` |  |  | string | Identifies the element (or elements) that describes the object.<br/>@see aria-labelledby\n `aria-details` |  |  | string | Identifies the element that provides a detailed, extended description for the object.<br/>@see aria-describedby.\n `aria-disabled` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.<br/>@see aria-hidden<br/>@see aria-readonly.\n `aria-dropeffect` |  |  | "link" \\| "none" \\| "copy" \\| "execute" \\| "move" \\| "popup" | Indicates what functions can be performed when a dragged object is released on the drop target.<br/>@deprecated in ARIA 1.1\n `aria-errormessage` |  |  | string | Identifies the element that provides an error message for the object.<br/>@see aria-invalid<br/>@see aria-describedby.\n `aria-expanded` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n `aria-flowto` |  |  | string | Identifies the next element (or elements) in an alternate reading order of content which, at the user\'s discretion,<br/>allows assistive technology to override the general default of reading in document source order.\n `aria-grabbed` |  |  | boolean \\| "true" \\| "false" | Indicates an element\'s "grabbed" state in a drag-and-drop operation.<br/>@deprecated in ARIA 1.1\n `aria-haspopup` |  |  | boolean \\| "dialog" \\| "menu" \\| "true" \\| "false" \\| "grid" \\| "listbox" \\| "tree" | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n `aria-hidden` |  |  | boolean \\| "true" \\| "false" | Indicates whether the element is exposed to an accessibility API.<br/>@see aria-disabled.\n `aria-invalid` |  |  | boolean \\| "true" \\| "false" \\| "grammar" \\| "spelling" | Indicates the entered value does not conform to the format expected by the application.<br/>@see aria-errormessage.\n `aria-keyshortcuts` |  |  | string | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n `aria-label` |  |  | string | Defines a string value that labels the current element.<br/>@see aria-labelledby.\n `aria-labelledby` |  |  | string | Identifies the element (or elements) that labels the current element.<br/>@see aria-describedby.\n `aria-level` |  |  | number | Defines the hierarchical level of an element within a structure.\n `aria-live` |  |  | "off" \\| "assertive" \\| "polite" | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n `aria-modal` |  |  | boolean \\| "true" \\| "false" | Indicates whether an element is modal when displayed.\n `aria-multiline` |  |  | boolean \\| "true" \\| "false" | Indicates whether a text box accepts multiple lines of input or only a single line.\n `aria-multiselectable` |  |  | boolean \\| "true" \\| "false" | Indicates that the user may select more than one item from the current selectable descendants.\n `aria-orientation` |  |  | "horizontal" \\| "vertical" | Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous.\n `aria-owns` |  |  | string | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br/>between DOM elements where the DOM hierarchy cannot be used to represent the relationship.<br/>@see aria-controls.\n `aria-placeholder` |  |  | string | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br/>A hint could be a sample value or a brief description of the expected format.\n `aria-posinset` |  |  | number | Defines an element\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-setsize.\n `aria-pressed` |  |  | boolean \\| "true" \\| "false" \\| "mixed" | Indicates the current "pressed" state of toggle buttons.<br/>@see aria-checked<br/>@see aria-selected.\n `aria-readonly` |  |  | boolean \\| "true" \\| "false" | Indicates that the element is not editable, but is otherwise operable.<br/>@see aria-disabled.\n `aria-relevant` |  |  | "text" \\| "additions" \\| "additions removals" \\| "additions text" \\| "all" \\| "removals" \\| "removals additions" \\| "removals text" \\| "text additions" \\| "text removals" | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.<br/>@see aria-atomic.\n `aria-required` |  |  | boolean \\| "true" \\| "false" | Indicates that user input is required on the element before a form may be submitted.\n `aria-roledescription` |  |  | string | Defines a human-readable, author-localized description for the role of an element.\n `aria-rowcount` |  |  | number | Defines the total number of rows in a table, grid, or treegrid.<br/>@see aria-rowindex.\n `aria-rowindex` |  |  | number | Defines an element\'s row index or position with respect to the total number of rows within a table, grid, or treegrid.<br/>@see aria-rowcount<br/>@see aria-rowspan.\n `aria-rowspan` |  |  | number | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.<br/>@see aria-rowindex<br/>@see aria-colspan.\n `aria-selected` |  |  | boolean \\| "true" \\| "false" | Indicates the current "selected" state of various widgets.<br/>@see aria-checked<br/>@see aria-pressed.\n `aria-setsize` |  |  | number | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.<br/>@see aria-posinset.\n `aria-sort` |  |  | "none" \\| "ascending" \\| "descending" \\| "other" | Indicates if items in a table or grid are sorted in ascending or descending order.\n `aria-valuemax` |  |  | number | Defines the maximum allowed value for a range widget.\n `aria-valuemin` |  |  | number | Defines the minimum allowed value for a range widget.\n `aria-valuenow` |  |  | number | Defines the current value for a range widget.<br/>@see aria-valuetext.\n `aria-valuetext` |  |  | string | Defines the human readable text alternative of aria-valuenow for a range widget.\n `as` |  |  | undefined | \n `autoCapitalize` |  |  | string | \n `autoCorrect` |  |  | string | \n `autoSave` |  |  | string | \n `children` |  |  | ReactNode | Content to be hidden\n `className` |  |  | string | \n `color` |  |  | string | \n `contentEditable` |  |  | Booleanish \\| "inherit" | \n `contextMenu` |  |  | string | \n `dangerouslySetInnerHTML` |  |  | { __html: string; } | \n `datatype` |  |  | string | \n `defaultChecked` |  |  | boolean | \n `defaultValue` |  |  | string \\| number \\| readonly string[] | \n `dir` |  |  | string | \n `draggable` |  |  | Booleanish | \n `focusable` |  | ```undefined``` | boolean | Allow component to be focusable, and thus become visible\n `forwardedAs` |  |  | undefined | \n `hidden` |  |  | boolean | \n `id` |  |  | string | \n `important` |  | ```undefined``` | boolean | Set styles with `!important`\n `inlist` |  |  | any | \n `inputMode` |  |  | "text" \\| "none" \\| "search" \\| "tel" \\| "url" \\| "email" \\| "numeric" \\| "decimal" | Hints at the type of data that might be entered by the user while editing the element or its contents<br/>@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n `is` |  |  | string | Specify that a standard HTML element should behave like a defined custom built-in element<br/>@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n `itemID` |  |  | string | \n `itemProp` |  |  | string | \n `itemRef` |  |  | string | \n `itemScope` |  |  | boolean | \n `itemType` |  |  | string | \n `key` |  |  | Key | \n `lang` |  |  | string | \n `onAbort` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAbortCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onAnimationEnd` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationEndCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIteration` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationIterationCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStart` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAnimationStartCapture` |  |  | AnimationEventHandler<HTMLSpanElement> | \n `onAuxClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onAuxClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onBeforeInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBeforeInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onBlur` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onBlurCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onCanPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThrough` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onCanPlayThroughCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onChange` |  |  | FormEventHandler<HTMLSpanElement> | \n `onChangeCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCompositionEnd` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionEndCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStart` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionStartCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdate` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onCompositionUpdateCapture` |  |  | CompositionEventHandler<HTMLSpanElement> | \n `onContextMenu` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onContextMenuCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onCopy` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCopyCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCut` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onCutCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onDoubleClick` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDoubleClickCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onDrag` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnd` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEndCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnter` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragEnterCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExit` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragExitCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeave` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragLeaveCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOver` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragOverCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStart` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDragStartCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDrop` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDropCapture` |  |  | DragEventHandler<HTMLSpanElement> | \n `onDurationChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onDurationChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptied` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEmptiedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncrypted` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEncryptedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEnded` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onEndedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onError` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onErrorCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onFocus` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onFocusCapture` |  |  | FocusEventHandler<HTMLSpanElement> | \n `onGotPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onGotPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onInput` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInputCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalid` |  |  | FormEventHandler<HTMLSpanElement> | \n `onInvalidCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onKeyDown` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyDownCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPress` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyPressCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUp` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onKeyUpCapture` |  |  | KeyboardEventHandler<HTMLSpanElement> | \n `onLoad` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStart` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadStartCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedData` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedDataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadata` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLoadedMetadataCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onLostPointerCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onLostPointerCaptureCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onMouseDown` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseDownCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseEnter` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseLeave` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMove` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseMoveCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOut` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOutCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOver` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseOverCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUp` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onMouseUpCapture` |  |  | MouseEventHandler<HTMLSpanElement> | \n `onPaste` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPasteCapture` |  |  | ClipboardEventHandler<HTMLSpanElement> | \n `onPause` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPauseCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlay` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlaying` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPlayingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onPointerCancel` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerCancelCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDown` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerDownCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnter` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerEnterCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeave` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerLeaveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMove` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerMoveCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOut` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOutCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOver` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerOverCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUp` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onPointerUpCapture` |  |  | PointerEventHandler<HTMLSpanElement> | \n `onProgress` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onProgressCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onRateChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onReset` |  |  | FormEventHandler<HTMLSpanElement> | \n `onResetCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onScroll` |  |  | UIEventHandler<HTMLSpanElement> | \n `onScrollCapture` |  |  | UIEventHandler<HTMLSpanElement> | \n `onSeeked` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekedCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeeking` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSeekingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelect` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSelectCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalled` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onStalledCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSubmit` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSubmitCapture` |  |  | FormEventHandler<HTMLSpanElement> | \n `onSuspend` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onSuspendCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdate` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTimeUpdateCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onTouchCancel` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchCancelCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEnd` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchEndCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMove` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchMoveCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStart` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTouchStartCapture` |  |  | TouchEventHandler<HTMLSpanElement> | \n `onTransitionEnd` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onTransitionEndCapture` |  |  | TransitionEventHandler<HTMLSpanElement> | \n `onVolumeChange` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onVolumeChangeCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaiting` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWaitingCapture` |  |  | ReactEventHandler<HTMLSpanElement> | \n `onWheel` |  |  | WheelEventHandler<HTMLSpanElement> | \n `onWheelCapture` |  |  | WheelEventHandler<HTMLSpanElement> | \n `placeholder` |  |  | string | \n `prefix` |  |  | string | \n `property` |  |  | string | \n `radioGroup` |  |  | string | \n `ref` |  |  | Ref<HTMLSpanElement> | \n `resource` |  |  | string | \n `results` |  |  | number | \n `role` |  |  | AriaRole | \n `security` |  |  | string | \n `slot` |  |  | string | \n `spellCheck` |  |  | Booleanish | \n `style` |  |  | CSSProperties | \n `suppressContentEditableWarning` |  |  | boolean | \n `suppressHydrationWarning` |  |  | boolean | \n `tabIndex` |  |  | number | \n `theme` |  |  | any | \n `title` |  |  | string | \n `translate` |  |  | "yes" \\| "no" | \n `typeof` |  |  | string | \n `unselectable` |  |  | "on" \\| "off" | \n `vocab` |  |  | string | \n\n\n\nWarningText\n===========\n\n### Import\n```js\n  import WarningText from \'@govuk-react/warning-text\';\n```\n\x3c!-- STORY --\x3e\n\nUse the warning text component when you need to warn users about something important, such as legal consequences of an action, or lack of action, that they might take.\n\n- https://govuk-react.github.io/govuk-react/?path=/docs/warning-text\n- https://design-system.service.gov.uk/components/warning-text/\n\n### Properties\nProp | Required | Default | Type | Description\n:--- | :------- | :------ | :--- | :----------\n `children` |  |  | ReactNode | Warning text to be displayed\n\n\n';function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Docs/API"}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:API_namespaceObject})]})}const api=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent()}},"../../node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="../../node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"../../node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var f=__webpack_require__("../../node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"../../node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("../../node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);